{"version":3,"sources":["helper/portfolioHelper.js"],"names":["getPortfolio","id","portfolio","filter","post","parseInt","getEngineer","items","authors","item","includes","getBuilder","getPostByCategory","pageRoute","category","some","r","getRecentPost","timestamp","Date","postdate","getFilteredPosts","posts","cat","tag","catgoryFilter","undefined","tagFilter","tags","today","slice","map","month","getTime","getDate","getMonth","getFullYear","setDemoDate"],"mappings":"wtFAAA,wOAIA,SAASA,EAAaC,GAClB,OAAOC,EAAUC,QAAO,SAAAC,GAAU,OAAOA,EAAKH,KAAOI,SAASJ,MAAO,GAUzE,SAASK,EAAYC,GAIjB,OAHYC,EAAQL,QAAO,SAACM,GACxB,OAAOF,EAAMG,SAASD,EAAKR,OAKnC,SAASU,EAAWJ,GAIhB,OAHYC,EAAQL,QAAO,SAACM,GACxB,OAAOF,EAAMG,SAASD,EAAKR,OAKnC,SAASW,EAAkBL,EAAOM,GAE9B,OADYX,EAAUC,QAAO,SAACC,GAAW,OAAOC,SAASD,EAAKH,MAAQI,SAASQ,IAAcT,EAAKU,SAASC,MAAK,SAAAC,GAAC,OAAIT,EAAMG,SAASM,SAkBxI,SAASC,IAIL,OAHYf,EAAUC,QAAO,SAAAC,GACzB,OAAOA,EAAKc,UAAY,IAAIC,KAAKf,EAAKgB,aAM9C,SAASC,EAAiBC,GAAuC,IAAhCnB,EAA+B,uDAAtB,CAAEoB,IAAK,GAAIC,IAAK,IAClDC,OAA+BC,IAAfvB,EAAOoB,KAAoC,OAAfpB,EAAOoB,KAA+B,KAAfpB,EAAOoB,IAC1EI,OAA2BD,IAAfvB,EAAOqB,KAAoC,OAAfrB,EAAOqB,KAA+B,KAAfrB,EAAOqB,IAa1E,OAXIC,IACAH,EAAQA,EAAMnB,QAAO,SAAAC,GACjB,YAA0BsB,IAAlBtB,EAAKU,UAA4C,OAAlBV,EAAKU,UAAsBV,EAAKU,SAASJ,SAASL,SAASF,EAAOoB,UAI7GI,IACAL,EAAQA,EAAMnB,QAAO,SAAAC,GACjB,YAAsBsB,IAAdtB,EAAKwB,MAAoC,OAAdxB,EAAKwB,MAAkBxB,EAAKwB,KAAKlB,SAASL,SAASF,EAAOqB,UAG9FF,GAjCX,WACI,IAAIO,EAAQ,IAAIV,KAChBjB,EAAU4B,MAAM,EAAG,GAAGC,KAAI,SAAA3B,GAN9B,IAAuB4B,EAWf,OAJA5B,EAAKc,UAAYW,EAAMI,UAAa,OAGpC7B,EAAKgB,SAAL,UAAmBS,EAAMK,UAAY,EAArC,aAVeF,EAUyCH,EAAMM,WATrD,CAAC,UAAW,WAAY,QAAS,QAAS,MAAO,OAAQ,OAAQ,SAAU,YAAa,UAAW,WAAY,YAC9GH,IAQV,aAA8EH,EAAMO,eAC7EhC,KASfiC,I","file":"static/js/8.eaeb7947.chunk.js","sourcesContent":["import portfolio from '../data/portfolio/portfolio.json';\r\nimport category from '../data/portfolio/category.json';\r\nimport authors from '../data/team.json';\r\n// Portfolio details\r\nfunction getPortfolio(id) {\r\n    return portfolio.filter(post => { return post.id === parseInt(id) })[0];\r\n}\r\n// Categories\r\nfunction getCategories(items) {\r\n    var elems = category.filter(item => {\r\n        return items.includes(item.id)\r\n    });\r\n    return elems;\r\n}\r\n// Engineer\r\nfunction getEngineer(items) {\r\n    var elems = authors.filter((item) => {\r\n        return items.includes(item.id)\r\n    });\r\n    return elems;\r\n}\r\n// Builder\r\nfunction getBuilder(items) {\r\n    var elems = authors.filter((item) => {\r\n        return items.includes(item.id)\r\n    });\r\n    return elems;\r\n}\r\n// Related post\r\nfunction getPostByCategory(items, pageRoute) {\r\n    var elems = portfolio.filter((post) => { return parseInt(post.id) !== parseInt(pageRoute) && post.category.some(r => items.includes(r)) });\r\n    return elems;\r\n}\r\n// Recent post\r\nfunction changeToMonth(month) {\r\n    var months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\r\n    return months[month];\r\n}\r\nfunction setDemoDate() {\r\n    var today = new Date();\r\n    portfolio.slice(0, 4).map(post => {\r\n        post.timestamp = today.getTime() - (3 * 24 * 60 * 60 * 1000);\r\n        // Remove this date on your live demo. This is only used for preview purposed. Your date should actually be updated\r\n        // in the blog.json object\r\n        post.postdate = `${today.getDate() - 2} ${changeToMonth(today.getMonth())}, ${today.getFullYear()}`;\r\n        return post;\r\n    });\r\n}\r\nfunction getRecentPost() {\r\n    var elems = portfolio.filter(post => {\r\n        return post.timestamp < new Date(post.postdate);\r\n    });\r\n    return elems;\r\n}\r\nsetDemoDate();\r\n// Filter \r\nfunction getFilteredPosts(posts, filter = { cat: '', tag: '' }) {\r\n    var catgoryFilter = filter.cat !== undefined && filter.cat !== null && filter.cat !== '';\r\n    var tagFilter = filter.tag !== undefined && filter.tag !== null && filter.tag !== '';\r\n    // Category filter\r\n    if (catgoryFilter) {\r\n        posts = posts.filter(post => {\r\n            return (post.category !== undefined && post.category !== null) && post.category.includes(parseInt(filter.cat))\r\n        })\r\n    }\r\n    // Tag filter\r\n    if (tagFilter) {\r\n        posts = posts.filter(post => {\r\n            return (post.tags !== undefined && post.tags !== null) && post.tags.includes(parseInt(filter.tag))\r\n        })\r\n    }\r\n    return posts;\r\n}\r\nexport { getPortfolio, getBuilder, getRecentPost, getPostByCategory, getFilteredPosts, getEngineer, getCategories };"],"sourceRoot":""}