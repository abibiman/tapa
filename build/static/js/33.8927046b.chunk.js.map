{"version":3,"sources":["components/sections/services/Content.js","components/pages/Services.js","helper/serviceHelper.js"],"names":["Content","props","handleClick","id","filteredProducts","getPosts","filter","product","category","includes","setState","activeItem","state","cat","this","catId","tag","tagId","getFilteredPosts","block","renderAll","map","item","i","className","to","src","process","image","alt","title","getCategories","slice","onClick","bind","parseInt","Component","pagelocation","Services","name","content","Header","Breadcrumbs","breadcrumb","pagename","match","params","Quoteform","Footer","getService","service","post","items","getRecentPost","timestamp","Date","postdate","posts","catgoryFilter","undefined","tagFilter","tags","today","month","getTime","getDate","getMonth","getFullYear","setDemoDate"],"mappings":"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","file":"static/js/33.8927046b.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport block from \"../../../data/service/service.json\";\r\nimport { getFilteredPosts, getCategories } from \"../../../helper/serviceHelper\";\r\nimport category from \"../../../data/service/category.json\";\r\n\r\nclass Content extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            filteredProducts: this.getPosts(),\r\n            activeItem: 0\r\n        };\r\n    }\r\n    handleClick = id => {\r\n        let filteredProducts = [];\r\n        if (id === 0) {\r\n            filteredProducts = this.getPosts();\r\n        } else {\r\n            filteredProducts = this.getPosts().filter(\r\n                (product) => product.category.includes(id)\r\n            );\r\n        }\r\n        this.setState({ filteredProducts, activeItem: id });\r\n    };\r\n    getPosts() {\r\n        var cat = this.props.catId ? this.props.catId : '';\r\n        var tag = this.props.tagId ? this.props.tagId : '';\r\n        var filteredItems = getFilteredPosts(block, { cat, tag });\r\n        return filteredItems;\r\n    }\r\n    render() {\r\n        const renderAll = this.state.filteredProducts.map((item, i) => (\r\n            <div className=\"col-lg-3 col-md-6 filter-box\" key={i}>\r\n                <div className=\"service-item animate-img mb-xl-30\">\r\n                    <Link to={\"/service-details/\" + item.id}>\r\n                        <img src={process.env.PUBLIC_URL + \"/\" + item.image[0]} className=\"image-fit\" alt={item.title} />\r\n                        <div className=\"text-wrapper\">\r\n                            <h5 className=\"text-custom-blue no-margin fw-600 fs-20\">{item.title}</h5>\r\n                            {getCategories(item.category).slice(0, 1).map((cat, i) => (\r\n                                <p className=\"text-light-white no-margin\" key={i}>{cat.title}</p>\r\n                            ))}\r\n                        </div>\r\n                    </Link>\r\n                </div>\r\n            </div>\r\n        ));\r\n        return (\r\n            <section className=\"section-padding our-services\">\r\n                <div className=\"container\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-12\">\r\n                            <div className=\"filter-gallery custom-tabs mb-xl-40\">\r\n                                <ul className=\"custom\">\r\n                                    <li className={this.state.activeItem === 0 ? 'active' : ''}>\r\n                                        <Link to=\"#\" className=\"text-custom-black\" onClick={this.handleClick.bind(this, 0)}>All</Link>\r\n                                    </li>\r\n                                    {category.map((item, i) => (\r\n                                        <li key={i} className={this.state.activeItem === parseInt(item.id) ? 'active' : ''}>\r\n                                            <Link to=\"#\" className=\"text-custom-black\" onClick={this.handleClick.bind(this, item.id)}>{item.title}</Link>\r\n                                        </li>\r\n                                    ))}\r\n                                </ul>\r\n                            </div>\r\n                            <div className=\"row gallery-grid\">\r\n                                {/* Data */}\r\n                                {renderAll}\r\n                                {/* Data */}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </section>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Content;","import React, { Component, Fragment } from 'react';\r\nimport MetaTags from \"react-meta-tags\";\r\nimport Header from '../layouts/Header';\r\nimport Breadcrumbs from '../layouts/Breadcrumbs';\r\nimport Quoteform from '../layouts/Quoteform';\r\nimport Footer from '../layouts/Footer';\r\nimport Content from '../sections/services/Content';\r\n\r\nconst pagelocation = \"Services\";\r\n\r\nclass Services extends Component {\r\n    render() {\r\n        return (\r\n            <Fragment>\r\n                <MetaTags>\r\n                    <title>Cali - Constructions & Shop - React Template | {pagelocation}</title>\r\n                    <meta\r\n                        name=\"description\"\r\n                        content=\"#\"\r\n                    />\r\n                </MetaTags>\r\n                <Header />\r\n                <Breadcrumbs breadcrumb={{ pagename: pagelocation }} />\r\n                <Content\r\n                    catId={this.props.match.params.catId}\r\n                    tagId={this.props.match.params.tagId}\r\n                />\r\n                <Quoteform />\r\n                <Footer />\r\n            </Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Services;","import service from '../data/service/service.json';\r\nimport category from '../data/service/category.json';\r\n// Service details\r\nfunction getService(id) {\r\n    return service.filter(post => { return post.id === parseInt(id) })[0];\r\n}\r\n// Categories\r\nfunction getCategories(items) {\r\n    var elems = category.filter(item => {\r\n        return items.includes(item.id)\r\n    });\r\n    return elems;\r\n}\r\n// Related post\r\nfunction getPostByCategory(items, pageRoute) {\r\n    var elems = service.filter((post) => { return parseInt(post.id) !== parseInt(pageRoute) && post.category.some(r => items.includes(r)) });\r\n    return elems;\r\n}\r\n// Recent post\r\nfunction changeToMonth(month) {\r\n    var months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\r\n    return months[month];\r\n}\r\nfunction setDemoDate() {\r\n    var today = new Date();\r\n    service.slice(0, 4).map(post => {\r\n        post.timestamp = today.getTime() - (3 * 24 * 60 * 60 * 1000);\r\n        // Remove this date on your live demo. This is only used for preview purposed. Your date should actually be updated\r\n        // in the blog.json object\r\n        post.postdate = `${today.getDate() - 2} ${changeToMonth(today.getMonth())}, ${today.getFullYear()}`;\r\n        return post;\r\n    });\r\n}\r\nfunction getRecentPost() {\r\n    var elems = service.filter(post => {\r\n        return post.timestamp < new Date(post.postdate);\r\n    });\r\n    return elems;\r\n}\r\nsetDemoDate();\r\n// Filter \r\nfunction getFilteredPosts(posts, filter = { cat: '', tag: '' }) {\r\n    var catgoryFilter = filter.cat !== undefined && filter.cat !== null && filter.cat !== '';\r\n    var tagFilter = filter.tag !== undefined && filter.tag !== null && filter.tag !== '';\r\n    // Category filter\r\n    if (catgoryFilter) {\r\n        posts = posts.filter(post => {\r\n            return (post.category !== undefined && post.category !== null) && post.category.includes(parseInt(filter.cat))\r\n        })\r\n    }\r\n    // Tag filter\r\n    if (tagFilter) {\r\n        posts = posts.filter(post => {\r\n            return (post.tags !== undefined && post.tags !== null) && post.tags.includes(parseInt(filter.tag))\r\n        })\r\n    }\r\n    return posts;\r\n}\r\nexport { getService, getRecentPost, getPostByCategory, getFilteredPosts, getCategories };"],"sourceRoot":""}